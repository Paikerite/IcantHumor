@inherits LayoutComponentBase

<MudThemeProvider Theme="MyCustomTheme" IsDarkMode="true" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider/>

<MudLayout>
    <MudAppBar Elevation="3" Fixed="true" Class="d-flex justify-space-between flex-grow-1 gap-4" Style="background: rgba(33,33,33, 0.5) !important; backdrop-filter: blur(10px);">
        <MudStack Class="ml-3" Row="true">
            <MudImage Class="" Src="/staticimgs/ICANT1x.webp"></MudImage>
            <MudText Typo="Typo.h5">
                <b>Humor</b>
            </MudText>
        </MudStack>
        <MudStack Class="flex-grow-1 justify-space-around rounded ms-15 me-15" Row="true">
            <MudButton FullWidth="true" Target="_parent" Href="/" Variant="Variant.Text" Size="Size.Large">Home</MudButton>
            <AuthorizeView>
                <Authorized>
                    <MudButton FullWidth="true" Target="_parent" Href="/Favourites" Variant="Variant.Text" Size="Size.Large">Favourites</MudButton>
                </Authorized>
            </AuthorizeView>
        </MudStack>
        <AuthorizeView>
            <Authorized>
                <MudMenu ActivationEvent="@MouseEvent.MouseOver">
                    <ActivatorContent>
                        <MudAvatar Class="me-3" Color="Color.Primary">
                            @if (userViewModel is null || userViewModel.UserName is null)
                            {
                                <MudProgressCircular Color="Color.Secondary" Size="Size.Medium" Indeterminate="true" />
                            }
                            else if (userViewModel.ProfilePicture != null)
                            {
                                <MudImage ObjectFit="ObjectFit.Cover" Src="@userViewModel.ProfilePicture"></MudImage>
                            }
                            else
                            {
                                @userViewModel.UserName[0]
                            }
                        </MudAvatar>
                    </ActivatorContent>
                    <ChildContent>
                        @if (userViewModel == null)
                        {
                            <div class="d-flex justify-center">
                                <MudProgressCircular Color="Color.Secondary" Size="Size.Medium" Indeterminate="true" />
                            </div>
                        }
                        else
                        {
                            <MudMenuItem Href="@($"/InfoUser/{userViewModel.Id}")">Profile</MudMenuItem>
                        }
                        <MudMenuItem OnClick="Logout">Sign Out</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </Authorized>
            <NotAuthorized>
                <MudButton Href="/SignUser" Variant="Variant.Filled" Color="Color.Primary">Sign in</MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <MudMainContent Class="mt-3">
        <MudContainer Fixed="true" MaxWidth="MaxWidth.ExtraLarge">
            @if (userViewModel != null && userViewModel.Role == Roles.Forbidden)
            {
                <div class="d-flex flex-grow-1 flex-column align-center">
                    <MudText Typo="Typo.h4" Color="Color.Error">You've got banned!</MudText>
                    <MudImage Src="staticimgs/WhatTheFuckMan4x.webp"></MudImage>
                    <MudText>What did you expect?</MudText>
                </div>
            }
            else
            {
                @Body
            }
        </MudContainer>
    </MudMainContent>
    <MudMainContent Class="flex-grow-0">
        <MudContainer Fixed="true">
            <Footer/>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    [Inject]
    public NavigationManager navigationManager { get; set; } = default!;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; } = default!;

    [Inject]
    public IUsersService usersService { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private ProtectedLocalStorage LocalStorage { get; set; } = default!;

    [Inject]
    private ILogger<MainLayout> logger { get; set; } = default!;
    public UserViewModel userViewModel { get; set; } = default!;

    MudTheme MyCustomTheme = new MudTheme()
        {
            PaletteDark = new PaletteDark()
            {
                AppbarText = Colors.DeepPurple.Default,
                PrimaryLighten = Colors.DeepPurple.Lighten2,
                PrimaryDarken = Colors.DeepPurple.Darken1,
                Primary = Colors.DeepPurple.Default,
                Secondary = Colors.DeepPurple.Default,
                TextSecondary = Colors.DeepPurple.Lighten5,
                TextPrimary = Colors.DeepPurple.Lighten4,
                TextDisabled = Colors.DeepPurple.Darken1,
                Tertiary = Colors.DeepPurple.Lighten5,
            },

            Typography = new Typography()
            {
                Default = new Default()
                {
                    FontFamily = new[] { "Chakra Petch", "Jura" },
                    FontSize = ".875rem",
                    FontWeight = 200,
                    LineHeight = 1.43,
                    LetterSpacing = ".01071em"
                }
            },
        };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationState;
            if (authState.User.Identity is not null && authState.User.Identity.IsAuthenticated && authState.User.Identity.Name is not null)
            {
                userViewModel = await usersService.GetUserByName(authState.User.Identity.Name) ?? throw new NullReferenceException("mainlayout: user is null");
                // IsConfirmEmailCheck(userViewModel.Id);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message);
            Snackbar.Add($"Some shit happend in the server, info: {ex.Message}", Severity.Error);
        }
    }

    private async Task Logout()
    {
        await LocalStorage.DeleteAsync("ICANTHUMOR512");
        navigationManager.NavigateTo("/", true);
    }
}