@* @page "/{SearchName?}/{page:int?}/{*categoriesStr}" *@
@page "/"

<PageTitle>Treasure</PageTitle>

<MudPaper Class="mb-3">
    <MudToolBar Class="d-flex justify-space-between flex-grow-1">
        <AuthorizeView>
            <Authorized>
                <MudIconButton Class="me-3" Icon="@Icons.Material.Outlined.Add" Color="Color.Inherit" Href="/PostAdd" />
            </Authorized>
        </AuthorizeView>
        <MudTextField @bind-Value="SearchText" @bind-Value:after="InitMediaFiles" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" Margin="Margin.Dense" AdornmentColor="Color.Primary" />
        <MudIconButton Class="ml-3" Icon="@Icons.Material.Outlined.Settings" Color="Color.Inherit" />
    </MudToolBar>
</MudPaper>

<MudChipSet Filter="true" @bind-SelectedChips="selectedCategories" @bind-SelectedChips:after="InitMediaFiles" Class="d-flex flex-nowrap overflow-auto mb-3" MultiSelection="true">
    @if (categories != null)
    {
        @foreach (var item in categories)
        {
            if (selectedCategoryGuidsByUrl != null && selectedCategoryGuidsByUrl.Contains(item.Id))
            {
                <MudChip Class="w-100" Value="@item.Id" Default="true" Text="@item.Name"></MudChip>
            }
            else
            {
                <MudChip Class="w-100" Value="@item.Id" Text="@item.Name"></MudChip>
            }
        }
    }
    else
    {
        <MudProgressLinear Indeterminate="true" Color="Color.Primary" />
    }
</MudChipSet>

<MudGrid>
    @if (memes == null || isLoadingMedia == true)
    {
        @for (int i = 0; i < ItemsPerPage; i++)
        {
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
                    <MudCardContent>
                        <MudSkeleton Height="42px;" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudSkeleton Width="64px" Height="40px" Class="me-1" />
                        <MudSkeleton Width="64px" Height="40px" Class="me-1" />
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }

    }
    else
    {
        @foreach (var item in memes)
        {
            <MudItem xs="12" sm="6" md="3">
                <MudCard Class="border-solid">
                    <MudLink Href="@($"/PostDetail/{item.Id}")" Color="Color.Tertiary" Underline="Underline.None">
                        @*<MudCardMedia Image="@(item.UrlToFile.Replace(@"\", "/"))"/>*@
                        <MudCardContent>
                            <MudBadge Content="item.TypeOfFile.ToString()" Color="Color.Primary" Overlap="true">
                                @if (item.TypeOfFile is TypeOfFile.Video)
                                {
                                    <BlazoredVideo class="w-100 rounded-lg"
                                                   style="max-width:290px;"
                                                   controls="controls">
                                        <source src="@item.UrlToFile" type="video/mp4" />
                                    </BlazoredVideo>
                                }
                                else
                                {
                                    <MudImage Fluid="true" Src="@item.UrlToFile" Class="rounded-lg"></MudImage>
                                }
                                <MudText Typo="Typo.h6">@item.Title</MudText>
                            </MudBadge>
                        </MudCardContent>
                    </MudLink>
                    <MudCardActions>
                        <MudButton @onclick="()=>PutReact(React.Like, item.Id)" Variant="Variant.Text" aria-label="kek">
                            <MudImage Class="me-1" Src="/staticimgs/ICANT1x.webp"></MudImage>
                            @item.Like
                        </MudButton>
                        <MudButton @onclick="()=>PutReact(React.Dislike, item.Id)" Variant="Variant.Text" aria-label="cringe">
                            <MudImage Class="me-1" Src="/staticimgs/CatCringe1x.webp"></MudImage>
                            @item.Dislike
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    }
    <MudItem xs="12">
        <div class="d-flex flex-grow-1 flex-column align-center">
            <MudPagination ShowFirstButton="true" @bind-Selected="@SelectedPage" @bind-Selected:after="InitMediaFiles" ShowLastButton="true" Count="CountPages" />
        </div>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "page")]
    public int? Page { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "search")]
    public string? SearchName { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "categories")]
    public string? categoriesStr { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Inject]
    private IMediaFilesService mediaFilesService { get; set; }

    [Inject]
    private NavigationManager navigation { get; set; }

    [Inject]
    private IReactedUserService reactedUserService { get; set; }

    [Inject]
    private ICategoriesService categoriesService { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    [Inject]
    private IUsersService usersService { get; set; }

    [Inject]
    private ISnackbar Snackbar { get; set; }

    private IEnumerable<MediaViewModel> memes { get; set; }
    private IEnumerable<CategoryViewModel> categories { get; set; }
    private IEnumerable<Guid> selectedCategoryGuidsByUrl { get; set; }
    private UserViewModel user { get; set; }

    private int ItemsPerPage { get; set; } = 8;

    private int SelectedPage { get; set; } = 1;

    private int GeneralCountOfMemes { get; set; }

    private int CountPages { get; set; } = 1;

    private bool isLoadingMedia { get; set; } = false;

    public string SearchText { get; set; }

    public MudChip[] selectedCategories;

    private AuthenticationState authState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (categoriesStr != null)
            {
                selectedCategoryGuidsByUrl = categoriesStr.Split('&')
                                                        .Select(s => Guid.Parse(s))
                                                        .ToList();
            }

            if (SearchName != null)
            {
                SearchText = SearchName;
            }

            SelectedPage = Page != null ? (int)Page : 1;

            // if (Page == null)
            // {
            //     memes = await mediaFilesService.GetMediaPerPage(0, ItemsPerPage);
            //     Page = 0;
            // }
            // else
            // {
            //     memes = await mediaFilesService.GetMediaPerPage((int)Page, ItemsPerPage);
            //     SelectedPage = (int)Page;
            // }

            // GeneralCountOfMemes = await mediaFilesService.GetCountMediaFiles();

            // CountPages = GeneralCountOfMemes / ItemsPerPage + 1;
            await InitMediaFiles();

            categories = await categoriesService.GetCategories();
            authState = await authenticationState;
            user = await usersService.GetUserByName(authState.User.Identity.Name);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Some shit happend in the server, info: {ex.Message}", Severity.Error);
        }
    }

    private async Task PutReact(React reaction, Guid guidPost)
    {
        try
        {
            if (authState.User.Identity.IsAuthenticated)
            {
                var post = await mediaFilesService.GetMediaViewModel(guidPost);
                if (!post.WhoReacted.Any(w => w.IdReactedUser == user.Id))
                {
                    var changePost = await mediaFilesService.MakeReactionInPost(post.Id, new ReactedUserViewModel
                        {
                            IdReactedUser = user.Id,
                            ChosenReact = reaction,
                        });

                    memes.First(m => m.Id == guidPost).WhoReacted = changePost.WhoReacted;
                }
                else
                {
                    var whoReacted = post.WhoReacted.First(w => w.IdReactedUser == user.Id);
                    var react = await reactedUserService.DeleteReactedUser(whoReacted.Id);

                    memes.First(m => m.Id == guidPost).WhoReacted
                        .Remove(memes
                            .First(m => m.Id == guidPost).WhoReacted
                            .First(a => a.Id == whoReacted.Id));
                    if (react.ChosenReact != reaction)
                    {
                        var changePost = await mediaFilesService.MakeReactionInPost(post.Id, new ReactedUserViewModel
                            {
                                IdReactedUser = user.Id,
                                ChosenReact = reaction,
                            });

                        memes.First(m => m.Id == guidPost).WhoReacted = changePost.WhoReacted;
                    }

                }
            }
            else
            {
                navigationManager.NavigateTo("/SignUser", true);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Some shit happend in the server, try again later, info: {ex.Message}", Severity.Error);
        }
    }

    private async Task InitMediaFiles()
    {
        isLoadingMedia = true;
        try
        {
            if (selectedCategories != null && selectedCategories.Length != 0)
            {
                var selectedCategr = selectedCategories.Select(ct => (Guid)ct.Value);
                memes = await mediaFilesService.GetCategorizedMediaPerPage(SelectedPage, ItemsPerPage, selectedCategr);
                GeneralCountOfMemes = await mediaFilesService.GetCountMediaFilesIncludeCategories(selectedCategr);

                CountPages = GeneralCountOfMemes / ItemsPerPage + 1;
                string ctgStr = string.Join("&", selectedCategr);
                string uri = navigation.GetUriWithQueryParameters(
                        new Dictionary<string, object?>
                            {
                                ["categories"] = ctgStr,
                                ["search"] = null,
                                ["page"] = SelectedPage
                            });
                navigation.NavigateTo(uri);
            }
            else if (!string.IsNullOrWhiteSpace(SearchText))
            {
                memes = await mediaFilesService.GetMediaFilesByNameByPages(SearchText, SelectedPage, ItemsPerPage);
                GeneralCountOfMemes = await mediaFilesService.GetCountMediaFilesBySearch(SearchText);
                CountPages = GeneralCountOfMemes / ItemsPerPage + 1;
                string uri = navigation.GetUriWithQueryParameters(
                        new Dictionary<string, object?>
                            {
                                ["categories"] = null,
                                ["search"] = SearchText,
                                ["page"] = SelectedPage
                            });
                navigation.NavigateTo(uri);
            }
            else
            {
                memes = await mediaFilesService.GetMediaPerPage(SelectedPage, ItemsPerPage);
                GeneralCountOfMemes = await mediaFilesService.GetCountMediaFiles();

                CountPages = GeneralCountOfMemes / ItemsPerPage + 1;
                string uri = navigation.GetUriWithQueryParameters(
                                        new Dictionary<string, object?>
                                            {
                                                ["categories"] = null,
                                                ["search"] = null,
                                                ["page"] = SelectedPage
                                            });

                navigation.NavigateTo(uri);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Some shit happend in the server, info: {ex.Message}", Severity.Error);
        }
        isLoadingMedia = false;
    }
}