@page "/"

<PageTitle>Treasure</PageTitle>

<MudPaper Class="mb-3">
    <MudToolBar Class="d-flex flex-grow-1">
        <MudGrid>
            <MudItem xs="1" Class="align-self-center">
                <AuthorizeView>
                    <Authorized>
                        <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Outlined.Add" Color="Color.Primary" Href="/PostAdd" />
                    </Authorized>
                </AuthorizeView>
            </MudItem>
            <MudItem xs="5" sm="8">
                <MudTextField @bind-Value="SearchText" @bind-Value:after="InitMediaFiles" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" Margin="Margin.Dense" AdornmentColor="Color.Primary" />
            </MudItem>
            <MudItem xs="5" sm="2">
                <MudSelect @bind-Value="@SelectedSort" @bind-Value:after="InitMediaFiles" Margin="Margin.Dense" T="Sort" Dense="true" Label="Sort" Variant="Variant.Outlined">
                    <MudSelectItem Value="Sort.DateUploadingDown">Oldest</MudSelectItem>
                    <MudSelectItem Value="Sort.DateUploadingUp">Newest</MudSelectItem>
                    <MudSelectItem Value="Sort.Rating">Most rated</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="1" Class="align-self-center">
                <MudMenu Variant="Variant.Filled" Icon="@Icons.Material.Outlined.Settings" Color="Color.Inherit" Dense>
                    <MudMenuItem>
                        <MudMenu Variant="Variant.Filled" ActivationEvent="MouseEvent.MouseOver" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopRight" Dense>
                            <ActivatorContent>
                                <MudMenuItem>Show on page</MudMenuItem>
                            </ActivatorContent>

                            <ChildContent>
                                @if (ItemsPerPage == 8)
                                {
                                    <MudMenuItem IconColor="Color.Primary" Icon="@Icons.Material.Filled.Check">8</MudMenuItem>
                                }
                                else
                                {
                                    <MudMenuItem OnClick="()=>ChangedItemsPerPage(8)">8</MudMenuItem>
                                }
                                @if (ItemsPerPage == 16)
                                {
                                    <MudMenuItem IconColor="Color.Primary" Icon="@Icons.Material.Filled.Check">16</MudMenuItem>
                                }
                                else
                                {
                                    <MudMenuItem OnClick="()=>ChangedItemsPerPage(16)">16</MudMenuItem>
                                }
                                @if (ItemsPerPage == 30)
                                {
                                    <MudMenuItem IconColor="Color.Primary" Icon="@Icons.Material.Filled.Check">30</MudMenuItem>
                                }
                                else
                                {
                                    <MudMenuItem OnClick="()=>ChangedItemsPerPage(30)">30</MudMenuItem>
                                }
                            </ChildContent>
                        </MudMenu>
                    </MudMenuItem>
                </MudMenu>
            </MudItem>
        </MudGrid>
    </MudToolBar>
</MudPaper>

<MudGrid>
    <MudItem xs="12" sm="7" md="8">
        <MudChipSet CheckMark="true" @bind-SelectedValues="selectedCategories" @bind-SelectedValues:after="InitMediaFiles" Class="d-flex flex-nowrap overflow-auto mb-3" SelectionMode="SelectionMode.MultiSelection">
            @if (categories != null && !isLoadingCategory)
            {
                @foreach (var item in categories)
                {
                    if (selectedCategoryGuidsByUrl != null && selectedCategoryGuidsByUrl.Contains(item.Id))
                    {
                        <MudChip Class="w-100 flex-none" Value="@item.Id" Default="true" Text="@item.Name"></MudChip>
                    }
                    else
                    {
                        <MudChip Class="w-100 flex-none" Value="@item.Id" Text="@item.Name"></MudChip>
                    }
                }
            }
            else
            {
                <MudProgressLinear Indeterminate="true" Color="Color.Primary" />
            }
        </MudChipSet>
    </MudItem>
    <MudItem xs="12" sm="5" md="4">
        <MudTextField @bind-Value="SearchCategory" @bind-Value:after="SearchCategories" Label="Search category" Variant="Variant.Outlined" Adornment="Adornment.End" Margin="Margin.Dense" AdornmentColor="Color.Primary" />
    </MudItem>
</MudGrid>

<MudGrid>
    @if (memes == null || isLoadingMedia == true)
    {
        @for (int i = 0; i < ItemsPerPage; i++)
        {
            <MudItem xs="12" sm="6" md="3">
                <MudCard>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" />
                    <MudCardContent>
                        <MudSkeleton Height="42px;" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudSkeleton Width="64px" Height="40px" Class="me-1" />
                        <MudSkeleton Width="64px" Height="40px" Class="me-1" />
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }

    }
    else if (memes.Count() == 0)
    {
        <MudItem xs="12" sm="6" md="3">
            <MudText Align="Align.Center" Typo="Typo.h4">
                ...Nothing here...
            </MudText>
        </MudItem>
    }
    else
    {
        @foreach (var item in memes)
        {
            <MudItem xs="12" sm="6" md="3">
                <MudCard Class="border-solid">
                    <MudLink Href="@($"/PostDetail/{item.Id}")" Color="Color.Tertiary" Underline="Underline.None">
                        <MudCardContent>
                            <MudBadge Content="item.TypeOfFile.ToString()" Color="Color.Primary" Overlap="true">
                                @if (item.TypeOfFile is TypeOfFile.Video)
                                {
                                    <BlazoredVideo class="w-100 rounded-lg"
                                                   style="max-width:100%;"
                                                   controls="controls"
                                                   loop="loop">
                                        <source src="@item.UrlToFile" type="video/mp4" />
                                    </BlazoredVideo>
                                }
                                else
                                {
                                    <MudImage Fluid="true" Src="@item.UrlToFile" Class="rounded-lg"></MudImage>
                                }
                                <MudText Typo="Typo.h6">@item.Title</MudText>
                            </MudBadge>
                        </MudCardContent>
                    </MudLink>
                    <MudCardActions Class="d-flex justify-space-between">
                        <div>
                            <MudTooltip Text="Funny" Placement="Placement.Top">
                                <MudButton @onclick="()=>PutReact(React.Like, item.Id)" Variant="Variant.Text" aria-label="kek">
                                    <MudImage Class="me-1" Src="/staticimgs/ICANT1x.webp"></MudImage>
                                    @item.Like
                                </MudButton>
                            </MudTooltip>
                            <MudTooltip Text="UnFunny" Placement="Placement.Top">
                                <MudButton @onclick="()=>PutReact(React.Dislike, item.Id)" Variant="Variant.Text" aria-label="cringe">
                                    <MudImage Class="me-1" Src="/staticimgs/CatCringe1x.webp"></MudImage>
                                    @item.Dislike
                                </MudButton>
                            </MudTooltip>
                        </div>
                        @*                         <MudToggleIconButton Variant="Variant.Text" Color="Color.Primary" ToggledColor="Color.Primary"
                Icon="@Icons.Material.Filled.Favorite" Title="Off" aria-label="favourite"
                ToggledIcon="@Icons.Material.Filled.FavoriteBorder" ToggledTitle="On" /> *@
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    }
    <MudItem xs="12">
        <div class="d-flex flex-grow-1 flex-column align-center">
            <MudPagination ShowFirstButton="true" @bind-Selected="@SelectedPage" @bind-Selected:after="InitMediaFiles" ShowLastButton="true" Count="CountPages" />
        </div>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "page")]
    public int? Page { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "search")]
    public string? SearchName { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "categories")]
    public string? categoriesStr { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "sort")]
    public int? sorting { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; } = default!;

    [Inject]
    private ProtectedLocalStorage LocalStorage { get; set; } = default!;

    [Inject]
    private IMediaFilesService mediaFilesService { get; set; } = default!;

    [Inject]
    private NavigationManager navigation { get; set; } = default!;

    [Inject]
    private IReactedUserService reactedUserService { get; set; } = default!;

    [Inject]
    private ICategoriesService categoriesService { get; set; } = default!;

    [Inject]
    private NavigationManager navigationManager { get; set; } = default!;

    [Inject]
    private IUsersService usersService { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private ILogger<MainLayout> logger { get; set; } = default!;

    private IEnumerable<MediaViewModel> memes { get; set; } = default!;
    private IEnumerable<CategoryViewModel> categories { get; set; } = default!;
    private IEnumerable<Guid> selectedCategoryGuidsByUrl { get; set; } = default!;
    private UserViewModel user { get; set; } = default!;

    private int ItemsPerPage { get; set; } = 8;

    private int SelectedPage { get; set; } = 1;

    private int GeneralCountOfMemes { get; set; }

    private int CountPages { get; set; } = 1;

    private Sort SelectedSort { get; set; }

    private bool isLoadingMedia { get; set; } = false;

    private bool isLoadingCategory { get; set; } = false;

    public string? SearchText { get; set; }

    public string? SearchCategory { get; set; }

    public IReadOnlyCollection<Guid> selectedCategories = default!;

    private AuthenticationState authState { get; set; } = default!;

    private System.Security.Principal.IIdentity identity { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var res = await LocalStorage.GetAsync<int>("HowManyItemsShowOnPage");
            //var res1 = await LocalStorage.GetAsync<int>("SortType");

            ItemsPerPage = res.Success ? res.Value : 8;
            //SelectedSort = res1.Success ? (Sort)res1.Value : Sort.DateUploadingDown;

            if (categoriesStr != null)
            {
                selectedCategoryGuidsByUrl = categoriesStr.Split('&')
                                                        .Select(s => Guid.Parse(s))
                                                        .ToList();
            }

            if (SearchName != null)
            {
                SearchText = SearchName;
            }

            SelectedPage = Page != null ? (int)Page : 1;
            SelectedSort = sorting != null ? (Sort)sorting : Sort.DateUploadingUp;

            await InitMediaFiles();

            isLoadingCategory = true;
            categories = await categoriesService.GetCategories() ?? throw new NullReferenceException("categories is null");
            isLoadingCategory = false;

            authState = await authenticationState;
            identity = authState.User.Identity ?? throw new NullReferenceException("identity is null");

            if (identity.Name is null) throw new NullReferenceException("identity name is null");

            user = await usersService.GetUserByName(identity.Name) ?? throw new NullReferenceException("User is null after request");
        }
        catch (NullReferenceException e)
        {
            logger.LogWarning(e.Message);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Some shit happend in the server, info: {ex.Message}", Severity.Error);
        }
    }

    private async Task PutReact(React reaction, Guid guidPost)
    {
        try
        {
            if (identity.IsAuthenticated)
            {
                var post = await mediaFilesService.GetMediaViewModel(guidPost) ?? throw new NullReferenceException("post is empty after response");
                if (!post.WhoReacted.Any(w => w.IdReactedUser == user.Id))
                {
                    var changePost = await mediaFilesService.MakeReactionInPost(post.Id, new ReactedUserViewModel
                        {
                            IdReactedUser = user.Id,
                            ChosenReact = reaction,
                        }) ?? throw new NullReferenceException("changePost is empty after put reaction");

                    memes.First(m => m.Id == guidPost).WhoReacted = changePost.WhoReacted;
                }
                else
                {
                    var whoReacted = post.WhoReacted.First(w => w.IdReactedUser == user.Id);
                    var react = await reactedUserService.DeleteReactedUser(whoReacted.Id) ?? throw new NullReferenceException("react is null, after deleted reaction");

                    memes.First(m => m.Id == guidPost).WhoReacted
                        .Remove(memes
                            .First(m => m.Id == guidPost).WhoReacted
                            .First(a => a.Id == whoReacted.Id));
                    if (react.ChosenReact != reaction)
                    {
                        var changePost = await mediaFilesService.MakeReactionInPost(post.Id, new ReactedUserViewModel
                            {
                                IdReactedUser = user.Id,
                                ChosenReact = reaction,
                            }) ?? throw new NullReferenceException("changePost is null after made reaction");

                        memes.First(m => m.Id == guidPost).WhoReacted = changePost.WhoReacted;
                    }

                }
            }
            else
            {
                navigationManager.NavigateTo("/SignUser", true);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Some shit happend in the server, try again, info: {ex.Message}", Severity.Error);
        }
    }

    private async Task ChangedItemsPerPage(byte items)
    {
        await LocalStorage.SetAsync("HowManyItemsShowOnPage", items);
        ItemsPerPage = items;
        await InitMediaFiles();
    }

    private async Task SearchCategories()
    {
        isLoadingCategory = true;
        try
        {
            if (!string.IsNullOrWhiteSpace(SearchCategory))
            {
                categories = await categoriesService.GetCategoriesByName(SearchCategory) ?? throw new NullReferenceException("categories is null after request by name");
            }
            else
            {
                categories = await categoriesService.GetCategories() ?? throw new NullReferenceException("categories is null after request by name");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Some shit happend in the server, info: {ex.Message}", Severity.Error);
        }
        isLoadingCategory = false;
    }

    // private async Task ChangedTypeSort(Sort typesort)
    // {
    //     await LocalStorage.SetAsync("SortType", (int)typesort);
    //     await InitMediaFiles();
    // }

    private async Task InitMediaFiles()
    {
        isLoadingMedia = true;
        try
        {
            if (selectedCategories != null && selectedCategories.Count != 0)
            {
                // var selectedCategr = selectedCategories.Select(ct => ct.Value);
                memes = await mediaFilesService.GetCategorizedMediaPerPage(SelectedPage, ItemsPerPage, selectedCategories, SelectedSort)
                    ?? throw new NullReferenceException("memes by Categorized is null after request by PerPage");
                GeneralCountOfMemes = await mediaFilesService.GetCountMediaFilesIncludeCategories(selectedCategories);

                CountPages = GeneralCountOfMemes / ItemsPerPage + 1;
                string ctgStr = string.Join("&", selectedCategories);
                string uri = navigation.GetUriWithQueryParameters(
                        new Dictionary<string, object?>
                            {
                                ["categories"] = ctgStr,
                                ["search"] = null,
                                ["page"] = SelectedPage,
                                ["sort"] = (int)SelectedSort
                            });
                navigation.NavigateTo(uri);
            }
            else if (!string.IsNullOrWhiteSpace(SearchText))
            {
                memes = await mediaFilesService.GetMediaFilesByNameByPages(SearchText, SelectedPage, ItemsPerPage, SelectedSort)
                    ?? throw new NullReferenceException("memes is null after request by ByNameByPages");
                GeneralCountOfMemes = await mediaFilesService.GetCountMediaFilesBySearch(SearchText);
                CountPages = GeneralCountOfMemes / ItemsPerPage + 1;
                string uri = navigation.GetUriWithQueryParameters(
                        new Dictionary<string, object?>
                            {
                                ["categories"] = null,
                                ["search"] = SearchText,
                                ["page"] = SelectedPage,
                                ["sort"] = (int)SelectedSort
                            });
                navigation.NavigateTo(uri);
            }
            else
            {
                memes = await mediaFilesService.GetMediaPerPage(SelectedPage, ItemsPerPage, SelectedSort)
                    ?? throw new NullReferenceException("memes is null after request by ByNameByPages");
                GeneralCountOfMemes = await mediaFilesService.GetCountMediaFiles();

                CountPages = GeneralCountOfMemes / ItemsPerPage + 1;
                string uri = navigation.GetUriWithQueryParameters(
                                        new Dictionary<string, object?>
                                            {
                                                ["categories"] = null,
                                                ["search"] = null,
                                                ["page"] = SelectedPage,
                                                ["sort"] = (int)SelectedSort
                                            });

                navigation.NavigateTo(uri);
            }
            // switch (SelectedSort)
            // {
            //     case Sort.Rating:
            //         memes = memes.OrderByDescending(a => a.Like);
            //         break;
            //     case Sort.DateUploadingUp:
            //         memes = memes.OrderByDescending(a => a.DateUpload);
            //         break;
            //     case Sort.DateUploadingDown:
            //         memes = memes.OrderBy(a => a.DateUpload);
            //         break;
            //     default:
            //         Snackbar.Add("Unknown type sort");
            //         break;
            // }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Some shit happend in the server, info: {ex.Message}", Severity.Error);
        }
        isLoadingMedia = false;
    }
}