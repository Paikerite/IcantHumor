@page "/InfoUser/{UserID:guid}"
@attribute [Authorize]

@if (user == null)
{
    <PageTitle>User info</PageTitle>
}
else
{
    <PageTitle>@user.UserName info</PageTitle>
}
<MudContainer>
    <MudGrid>
        <MudItem xs="12" sm="3" md="2">
            <MudPaper Class="pa-3">
                <MudStack Justify="Justify.Center">
                    @if (user == null)
                    {
                        <MudProgressCircular Color="Color.Secondary" Size="Size.Medium" Indeterminate="true" />
                    }
                    else if (user.ProfilePicture != null || model.File != null)
                    {
                        <div class="d-flex justify-center">
                            <MudImage Fluid="true" Src="@user.ProfilePicture" Class="rounded-lg" Width="128" id="avatarShowcase" />
                        </div>
                    }
                    else
                    {
                        <div class="d-flex justify-center">
                            <MudAvatar Color="Color.Primary">
                                @user.UserName[0]
                            </MudAvatar>
                        </div>
                    }
                    @if (user == null)
                    {
                        <MudProgressCircular Color="Color.Secondary" Size="Size.Medium" Indeterminate="true" />
                    }
                    else
                    {
                        <div>
                            <MudText Typo="Typo.h5" Color="Color.Secondary" Align="Align.Center">@user.UserName</MudText>
                                <MudText Align="Align.Center">Joker</MudText>
                            </div>
                        <div>
                            <MudText Typo="Typo.h5" Align="Align.Center">@user.Id</MudText>
                                <MudText Align="Align.Center">GUID Number</MudText>
                            </div>
                        <div>
                            <MudText Typo="Typo.h5" Align="Align.Center">@user.FullUserInfo.RegisteredAt.ToString("d")</MudText>
                                <MudText Align="Align.Center">Join Date</MudText>
                            </div>
                        <div>
                            <MudText Typo="Typo.h5" Align="Align.Center">@user.Role</MudText>
                                <MudText Align="Align.Center">Rank</MudText>
                            </div>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="9" md="4">
            <MudPaper Class="pa-3">
                <EditForm Context="EditUser" Model="@model" OnValidSubmit="@OnValidEdit">
                    <DataAnnotationsValidator />
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField Label="Username" Variant="Variant.Filled" DisableUnderLine="true" @bind-Value="model.UserName" @bind-Value:after="@IsUnsavedData" For="@(() => model.UserName)" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Label="Email" Variant="Variant.Filled" DisableUnderLine="true" Class="mt-3" @bind-Value="model.UserEmail" @bind-Value:after="@IsUnsavedData" For="@(() => model.UserEmail)" InputType="InputType.Email" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudFileUpload T="IBrowserFile" @bind-Files="model.File" For="@(() => model.File)" Accept=".png" OnFilesChanged="UploadFile">
                                <ButtonTemplate>
                                    <MudButton HtmlTag="label"
                                               Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.CloudUpload"
                                               for="@context">
                                        Upload Avatar
                                    </MudButton>
                                </ButtonTemplate>
                                <SelectedTemplate>
                                    @if (context != null && context.Size <= maxFileSize)
                                    {
                                        <MudText>@context.Name</MudText>
                                    }
                                </SelectedTemplate>
                            </MudFileUpload>
                        </MudItem>
                        @if (isLoading)
                        {
                            <MudItem xs="12">
                                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                            </MudItem>
                        }
                        else if (isLoading == false && (string.IsNullOrEmpty(model.UserName) && string.IsNullOrEmpty(model.UserName) && (model.File == null || model.File.Size >= maxFileSize)))
                        {
                            <MudItem xs="12">
                                <MudButton Disabled="true" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                            </MudItem>
                        }
                        else
                        {
                            <MudItem xs="12">
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                            </MudItem>
                        }
                    </MudGrid>
                </EditForm>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="6">
            <MudPaper Class="pa-3">
                <MudText Class="mb-3" Align="Align.Center">Favourites</MudText>
                <MudCarousel Class="mud-width-full" Style="height:300px;" BulletsColor="Color.Primary" ShowArrows="true" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="true" TData="object">
                    @if (FavouritesRecentlyAdded != null)
                    {
                        foreach (var item in FavouritesRecentlyAdded)
                        {
                            <MudCarouselItem @onclick="()=>NavigateToSource(item.Id)" Transition="Transition.Fade" Color="@Color.Dark">
                                <div class="d-flex justify-center" style="height:100%">
                                    <MudImage Fluid="true" Src="@item.UrlToFile"></MudImage>
                                </div>
                            </MudCarouselItem>
                        }
                    }
                    else
                    {
                        @* <MudCarouselItem Color="@Color.Dark"> *@
                            <div class="d-flex" style="height:100%">
                                <MudProgressCircular Size="@Size.Large" />
                            </div>
                        @* </MudCarouselItem> *@
                    }
                </MudCarousel>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    [Parameter]
    public Guid UserID { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Inject]
    private ISnackbar Snackbar { get; set; }

    [Inject]
    private AuthenticationStateProvider authenticationStateProvider { get; set; }

    [Inject]
    private IUsersService usersService { get; set; }

    [Inject]
    private ProtectedLocalStorage LocalStorage { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    [Inject]
    private IFavouritesService favouritesService { get; set; }

    private IEnumerable<MediaViewModel> FavouritesRecentlyAdded { get; set; }

    private bool isLoading { get; set; } = false;

    private const string KeyForSnackbar = "UnsavedWarning";

    private Snackbar WarningUnSavedInfo { get; set; }

    private int maxFileSize = 1024 * 1024 * 2; // 2MB

    private AuthenticationState authState { get; set; }

    private UserViewModel user { get; set; }

    private class Model
    {
        [MinLength(3, ErrorMessage = "Minimum symbols - 3")]
        public string UserName { get; set; }
        [EmailAddress]
        public string UserEmail { get; set; }
        public IBrowserFile? File { get; set; }
    }

    private Model model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            authState = await authenticationState;
            user = await usersService.GetUser(UserID, true);
            var favourites = await favouritesService.GetFavourites();
            FavouritesRecentlyAdded = favourites.Take(8).Select(xd=>xd.FavMedia);
            if (user.UserName != authState.User.Identity.Name)
            {
                navigationManager.NavigateTo("/", replace: true);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error happend in the server, info: {ex.Message}", Severity.Error);
        }
    }

    private void IsUnsavedData()
    {
        if (!string.IsNullOrEmpty(model.UserEmail) || !string.IsNullOrEmpty(model.UserName) || model.File != null)
        {
            WarningUnSavedInfo = Snackbar.Add("Don't forget save the changes!", Severity.Warning, config =>
            {
                config.VisibleStateDuration = int.MaxValue;
                config.ShowCloseIcon = false;
                config.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
            }, KeyForSnackbar);
        }
        else if (string.IsNullOrEmpty(model.UserEmail) && string.IsNullOrEmpty(model.UserName) && (model.File == null || model.File.Size >= maxFileSize))
        {
            Snackbar.RemoveByKey(KeyForSnackbar);
        }
    }

    private void NavigateToSource(Guid guid)
    {
        navigationManager.NavigateTo($"/PostDetail/{guid}", true);
    }

    private async Task OnValidEdit(EditContext context)
    {
        isLoading = true;
        string urlToFile = null;
        string oldAvatarImgToDelete = null;

        var model = (Model)context.Model;
        if (model.File != null)
        {
            urlToFile = await CaptureFile();
            oldAvatarImgToDelete = user.ProfilePicture;
        }

        user.UserName = model.UserName != null ? model.UserName : user.UserName;
        user.FullUserInfo.UserEmail = model.UserEmail != null ? model.UserEmail : user.FullUserInfo.UserEmail;
        user.ProfilePicture = urlToFile != null ? urlToFile : user.ProfilePicture;

        try
        {
            if (await usersService.IsExistNameUserInDB(user.UserName) && user.UserName != authState.User.Identity.Name)
            {
                throw new Exception("This Username was already taken, try another");
            }

            var result = await usersService.PutUser(user.Id, user);
            if (result != null)
            {
                if (oldAvatarImgToDelete != null)
                {
                    System.IO.File.Delete(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", oldAvatarImgToDelete));
                }
                var JWTToken = GenerationTokenJWT.GenerateToken(new SessionUserModel
                    {
                        Id = result.Id,
                        Role = result.Role,
                        UserName = result.UserName,
                    });
                await LocalStorage.SetAsync("ICANTHUMOR512", JWTToken);
                await authenticationStateProvider.GetAuthenticationStateAsync();
            }
            else
            {
                if (urlToFile != null)
                {
                    System.IO.File.Delete(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", urlToFile));
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Some shit happend in the server, info: {ex.Message}", Severity.Error);
        }
        isLoading = false;
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        if (e.File.Size <= maxFileSize)
        {
            //model.File = e.File;
            var imageStream = e.File.OpenReadStream(maxFileSize);
            var dotnetImageStream = new DotNetStreamReference(imageStream);
            await JS.InvokeVoidAsync("setImage", "avatarShowcase", dotnetImageStream);
            Snackbar.Add($"This file {e.File.Name} has upload succesfully");
        }
        else
        {
            Snackbar.Add($"This file {e.File.Name} size too much, maximum {maxFileSize} mb", Severity.Error);
        }
        StateHasChanged();
    }

    private async Task<string> CaptureFile()
    {
        if (model.File == null)
        {
            return null;
        }
        try
        {
            //ImageFiles.Clear();
            // e.GetMultipleFiles(maxAllowedFiles) for several files
            string newFileName = Path.ChangeExtension(Path.GetRandomFileName(),
                                                      Path.GetExtension(model.File.Name));

            var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "AvatarsImages");
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }

            string absolutePath = Path.Combine(path, newFileName);
            string relativePath = Path.Combine("AvatarsImages", newFileName);


            await using FileStream fs = new(absolutePath, FileMode.Create);
            model.File = await model.File.RequestImageFileAsync(model.File.ContentType, 300, 300);
            await model.File.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Some shit happend in the server, info: {ex.Message}", Severity.Error);
            return null;
        }
    }
}
