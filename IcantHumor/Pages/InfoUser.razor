@page "/InfoUser/{UserID:guid}"
@attribute [Authorize]

@if (user == null)
{
    <PageTitle>User info</PageTitle>
}
else
{
    <PageTitle>@user.UserName info</PageTitle>
}
<MudContainer>
    <MudGrid>
        <MudItem xs="12" sm="3" md="2">
            <MudPaper Class="pa-3">
                <MudStack Justify="Justify.Center">
                    @if (user is null || user.UserName is null)
                    {
                        <MudProgressCircular Color="Color.Secondary" Size="Size.Medium" Indeterminate="true" />
                    }
                    else if (user.ProfilePicture != null || model.File != null)
                    {
                        <div class="d-flex justify-center">
                            <MudImage Fluid="true" Src="@user.ProfilePicture" Class="rounded-lg" Width="128" id="avatarShowcase" />
                        </div>
                    }
                    else
                    {
                        <div class="d-flex justify-center">
                            <MudAvatar Color="Color.Primary">
                                @user.UserName[0]
                            </MudAvatar>
                        </div>
                    }
                    @if (user is null || user.FullUserInfo is null)
                    {
                        <MudProgressCircular Color="Color.Secondary" Size="Size.Medium" Indeterminate="true" />
                    }
                    else
                    {
                        <div>
                            <MudText Typo="Typo.h5" Color="Color.Secondary" Align="Align.Center">@user.UserName</MudText>
                                <MudText Align="Align.Center"><strong>Joker</strong></MudText>
                            </div>
                        <div>
                            <MudText Typo="Typo.body1" Align="Align.Center">@user.Id</MudText>
                                <MudText Align="Align.Center"><strong>ID User</strong></MudText>
                            </div>
                        <div>
                            <MudText Typo="Typo.h5" Align="Align.Center">@user.FullUserInfo.RegisteredAt.ToString("d")</MudText>
                                <MudText Align="Align.Center"><strong>Join Date</strong></MudText>
                            </div>
                        <div>
                            <MudText Typo="Typo.h5" Align="Align.Center">@user.Role</MudText>
                                <MudText Align="Align.Center"><strong>Rank</strong></MudText>
                        </div>
                        @if (authState.User.IsInRole(Roles.Moderator.ToString()) || authState.User.IsInRole(Roles.BigBoss.ToString()))
                        {
                            <MudButton OnClick="BanUser" Variant="Variant.Filled" FullWidth="true" Color="Color.Error">BAN</MudButton>
                        }
                    }
                </MudStack>
            </MudPaper>
        </MudItem>
        @if (user != null && user.UserName == IdentityName)
        {
            <MudItem xs="12" sm="9" md="4">
                <MudPaper Class="pa-3">
                    <EditForm Context="EditUser" Model="@model" OnValidSubmit="@OnValidEdit">
                        <DataAnnotationsValidator />
                        <MudGrid>
                            <MudItem xs="12">
                                <MudTextField Label="Username" Variant="Variant.Filled" Underline="false" @bind-Value="model.UserName" @bind-Value:after="@IsUnsavedData" For="@(() => model.UserName)" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField Label="Email" Variant="Variant.Filled" Underline="false" Class="mt-3" @bind-Value="model.UserEmail" @bind-Value:after="@IsUnsavedData" For="@(() => model.UserEmail)" InputType="InputType.Email" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudFileUpload T="IBrowserFile" @bind-Files="model.File" For="@(() => model.File)" Accept=".png" OnFilesChanged="UploadFile">
                                    <ActivatorContent>
                                        <MudButton HtmlTag="label"
                                                   Variant="Variant.Filled"
                                                   Color="Color.Primary"
                                                   StartIcon="@Icons.Material.Filled.CloudUpload">
                                            Upload Avatar
                                        </MudButton>
                                    </ActivatorContent>
                                    <SelectedTemplate>
                                        @if (context != null && context.Size <= maxFileSize)
                                        {
                                            <MudText>@context.Name</MudText>
                                        }
                                    </SelectedTemplate>
                                </MudFileUpload>
                            </MudItem>
                            @if (isLoading)
                            {
                                <MudItem xs="12">
                                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                                </MudItem>
                            }
                            else if (isLoading == false && (string.IsNullOrEmpty(model.UserName) && string.IsNullOrEmpty(model.UserName) && (model.File == null || model.File.Size >= maxFileSize)))
                            {
                                <MudItem xs="12">
                                    <MudButton Disabled="true" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                                </MudItem>
                            }
                            else
                            {
                                <MudItem xs="12">
                                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
                                </MudItem>
                            }
                        </MudGrid>
                    </EditForm>
                </MudPaper>
            </MudItem>
        }
        <MudItem xs="12" sm="12" md="6">
            <MudPaper Class="pa-3">
                <MudText Class="mb-3" Align="Align.Center">Favourites</MudText>
                <MudCarousel Class="mud-width-full" Style="height:300px;" BulletsColor="Color.Primary" ShowArrows="true" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="true" TData="object">
                    @if (FavouritesRecentlyAdded != null)
                    {
                        foreach (var item in FavouritesRecentlyAdded)
                        {
                            if (item.FavMedia is not null && (item.FavMedia.TypeOfFile == TypeOfFile.Img || item.FavMedia.TypeOfFile == TypeOfFile.Gif))
                            {
                                <MudCarouselItem @onclick="()=>NavigateToSource(item.FavMedia.Id)" Transition="Transition.Fade" Color="@Color.Dark">
                                    <div class="d-flex justify-center" style="height:100%">
                                        <MudImage Fluid="true" Src="@item.FavMedia.UrlToFile"></MudImage>
                                    </div>
                                </MudCarouselItem>
                            }
                        }
                    }
                    else
                    {
                        <div class="d-flex" style="height:100%">
                            <MudProgressCircular Size="@Size.Large" />
                        </div>
                    }
                </MudCarousel>
                <MudLink Class="d-flex justify-end flex-grow-1" Href="/Favourites" Typo="Typo.caption">All favourites</MudLink>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    [Parameter]
    public Guid UserID { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private AuthenticationStateProvider authenticationStateProvider { get; set; } = default!;

    [Inject]
    private IUsersService usersService { get; set; } = default!;

    [Inject]
    private IMediaFilesService mediaFilesService { get; set; } = default!;

    [Inject]
    private ProtectedLocalStorage LocalStorage { get; set; } = default!;

    [Inject]
    private IJSRuntime JS { get; set; } = default!;

    [Inject]
    private NavigationManager navigationManager { get; set; } = default!;

    [Inject]
    private IFavouritesService favouritesService { get; set; } = default!;

    [Inject]
    private ILogger<InfoUser> logger { get; set; } = default!;

    private IEnumerable<FavouriteViewModel> FavouritesRecentlyAdded { get; set; } = default!;

    private bool isLoading { get; set; } = false;

    private const string KeyForSnackbar = "UnsavedWarning";

    private Snackbar WarningUnSavedInfo { get; set; } = default!;

    private int maxFileSize = 1024 * 1024 * 2; // 2MB

    private AuthenticationState authState { get; set; } = default!;

    private string IdentityName { get; set; } = default!;

    private UserViewModel user { get; set; } = default!;

    private class Model
    {
        [MinLength(3, ErrorMessage = "Minimum symbols - 3")]
        public string? UserName { get; set; }
        [EmailAddress]
        public string? UserEmail { get; set; }
        public IBrowserFile? File { get; set; }
    }

    private Model model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            authState = await authenticationState 
                ?? throw new NullReferenceException("authenticationState is null");

            if (authState.User.Identity is null) 
                throw new NullReferenceException("identity is null");

            IdentityName = authState.User.Identity.Name 
                ?? throw new NullReferenceException("identityName is null");

            user = await usersService.GetUser(UserID, true) 
                ?? throw new NullReferenceException("user is null after request");

            FavouritesRecentlyAdded = await favouritesService.GetCountFavouritesByUser(UserID, 8) 
                ?? throw new NullReferenceException("FavouritesRecentlyAdded is null after request");

            // if (user.UserName != authState.User.Identity.Name)
            // {
            //     navigationManager.NavigateTo("/", replace: true);
            // }
        }
        catch (NullReferenceException e)
        {
            logger.LogWarning(e.Message);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error happend in the server, info: {ex.Message}", Severity.Error);
        }
    }

    private void IsUnsavedData()
    {
        if (!string.IsNullOrEmpty(model.UserEmail) || !string.IsNullOrEmpty(model.UserName) || model.File != null)
        {
            WarningUnSavedInfo = Snackbar.Add("Don't forget save the changes!", Severity.Warning, config =>
            {
                config.VisibleStateDuration = int.MaxValue;
                config.ShowCloseIcon = false;
                config.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
            }, KeyForSnackbar);
        }
        else if (string.IsNullOrEmpty(model.UserEmail) && string.IsNullOrEmpty(model.UserName) && (model.File == null || model.File.Size >= maxFileSize))
        {
            Snackbar.RemoveByKey(KeyForSnackbar);
        }
    }

    private async Task BanUser()
    {
        var user = await usersService.ForbidUserAccess(UserID);
        var posts = await mediaFilesService.DeleteAllMediaByCreatedUserId(UserID);
        navigationManager.NavigateTo("/", true, true);
    }

    private void NavigateToSource(Guid guid)
    {
        navigationManager.NavigateTo($"/PostDetail/{guid}", true);
    }

    private async Task OnValidEdit(EditContext context)
    {
        isLoading = true;
        string? urlToFile = null;
        string? oldAvatarImgToDelete = null;

        if (user.FullUserInfo is null)
        {
            logger.LogWarning("user.FullUserInfo is null");
            return;    
        };

        var model = (Model)context.Model;
        if (model.File != null)
        {
            urlToFile = await CaptureFile();
            oldAvatarImgToDelete = user.ProfilePicture;
        }


        user.UserName = model.UserName != null ? model.UserName : user.UserName;
        user.FullUserInfo.UserEmail = model.UserEmail != null ? model.UserEmail : user.FullUserInfo.UserEmail;
        user.ProfilePicture = urlToFile != null ? urlToFile : user.ProfilePicture;

        try
        {
            if (user.UserName is null) throw new NullReferenceException("user UserName is null");

            if (await usersService.IsExistNameUserInDB(user.UserName) && user.UserName != IdentityName)
            {
                throw new Exception("This Username was already taken, try another");
            }

            var result = await usersService.PutUser(user.Id, user);
            if (result != null)
            {
                if (result.UserName is null) throw new NullReferenceException("result UserName is null");

                if (oldAvatarImgToDelete != null)
                {
                    System.IO.File.Delete(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", oldAvatarImgToDelete));
                }
                var JWTToken = GenerationTokenJWT.GenerateToken(new SessionUserModel
                    {
                        Id = result.Id,
                        Role = result.Role,
                        UserName = result.UserName,
                    });
                await LocalStorage.SetAsync("ICANTHUMOR512", JWTToken);
                await authenticationStateProvider.GetAuthenticationStateAsync();
            }
            else
            {
                if (urlToFile != null)
                {
                    System.IO.File.Delete(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", urlToFile));
                }
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex.Message);
            Snackbar.Add($"Some shit happend in the server, info: {ex.Message}", Severity.Error);
        }
        isLoading = false;
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        if (e.File.Size <= maxFileSize)
        {
            //model.File = e.File;
            var imageStream = e.File.OpenReadStream(maxFileSize);
            var dotnetImageStream = new DotNetStreamReference(imageStream);
            await JS.InvokeVoidAsync("setImage", "avatarShowcase", dotnetImageStream);
            Snackbar.Add($"This file {e.File.Name} has upload succesfully");
        }
        else
        {
            Snackbar.Add($"This file {e.File.Name} size too much, maximum {maxFileSize} mb", Severity.Error);
        }
        StateHasChanged();
    }

    private async Task<string?> CaptureFile()
    {
        if (model.File == null)
        {
            return null;
        }
        try
        {
            //ImageFiles.Clear();
            // e.GetMultipleFiles(maxAllowedFiles) for several files
            string newFileName = Path.ChangeExtension(Path.GetRandomFileName(),
                                                      Path.GetExtension(model.File.Name));

            var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "AvatarsImages");
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }

            string absolutePath = Path.Combine(path, newFileName);
            string relativePath = Path.Combine("AvatarsImages", newFileName);


            await using FileStream fs = new(absolutePath, FileMode.Create);
            model.File = await model.File.RequestImageFileAsync(model.File.ContentType, 300, 300);
            await model.File.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Some shit happend in the server, info: {ex.Message}", Severity.Error);
            return null;
        }
    }
}
