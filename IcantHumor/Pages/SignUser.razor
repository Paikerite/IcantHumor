@page "/SignUser"
@implements IDisposable

<EditForm EditContext="EditContext" OnValidSubmit="@OnValidLogin">
    <DataAnnotationsValidator />
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" sm="5">
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.h4" Color="Color.Primary" Align="Align.Start"><b>Login</b></MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Label="Login" Variant="Variant.Filled" DisableUnderLine="true" @bind-Value="model.UserName" For="@(() => model.UserName)" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Label="Password" Variant="Variant.Filled" DisableUnderLine="true" Class="mt-3" @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudCheckBox Color="Color.Primary" Label="Remember me?" @bind-Checked="model.Remember" For="@(() => model.Remember)"></MudCheckBox>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions Class="mx-3">
                    @if (isLoading)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                    }
                    else
                    {
                        <MudButton Href="/RegisterUser" Variant="Variant.Filled" Color="Color.Primary">Register</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" @onmouseover="OnButtonPreventLogin" Style="@LoginButtonStyle" Class="ml-auto">@( TrollMode ? "Nope" : "Login" )</MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Inject]
    private IUsersService usersService { get; set; }

    [Inject]
    private AuthenticationStateProvider authenticationStateProvider { get; set; }

    [Inject]
    private ProtectedLocalStorage LocalStorage { get; set; }

    [Inject]
    private ISnackbar Snackbar { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    private class LoginModel
    {
        [Required]
        public string UserName { get; set; }
        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }
        public bool Remember { get; set; } = true;
    }

    private LoginModel model = new();

    private EditContext? EditContext { get; set; }

    private string LoginButtonStyle { get; set; } = string.Empty;

    private bool TrollMode { get; set; } = false;

    private bool isLoading { get; set; } = false;

    protected override void OnInitialized()
    {
        EditContext = new(model);
        EditContext.OnValidationStateChanged += HandleValidation;
    }

    private void HandleValidation(object? sender, ValidationStateChangedEventArgs args)
    {
        if (!string.IsNullOrWhiteSpace(model.UserName) && !string.IsNullOrWhiteSpace(model.Password))
        {
            TrollMode = false;
        }
        EnableTrollMode();
    }

    private async Task OnValidLogin(EditContext context)
    {
        TrollMode = false;
        var model = (LoginModel)context.Model;

        isLoading = true;

        var result = await usersService.GetUserByName(model.UserName);

        if (result != null)
        {
            result = await usersService.GetUser(result.Id, true);
            if (result.FullUserInfo != null && result.FullUserInfo.Password == model.Password)
            {
                try
                {
                    var JWTToken = GenerationTokenJWT.GenerateToken(new SessionUserModel
                        {
                            Id = result.Id,
                            Role = result.Role,
                            UserName = result.UserName,
                        }, model.Remember);
                    await LocalStorage.SetAsync("ICANTHUMOR512", JWTToken);
                    await authenticationStateProvider.GetAuthenticationStateAsync();
                    navigationManager.NavigateTo("/", true);
                }

                catch (Exception ex)
                {
                    Snackbar.Add($"Some shit happend in the server, info: {ex.Message}", Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Wrong password or login", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Wrong password or login", Severity.Error);
        }

        isLoading = false;
    }

    private void OnButtonPreventLogin()
    {
        TrollMode = EditContext.Validate() ? false : true;
        EnableTrollMode();
    }

    private void EnableTrollMode()
    {
        if (TrollMode)
        {
            Random random = new();
            LoginButtonStyle = $"transition: transform .2s !important; transform: translateX({random.Next(-100, 50)}px) translateY({random.Next(-100, 100)}px);";
        }
        else
        {
            LoginButtonStyle = string.Empty;
        }
    }

    void IDisposable.Dispose()
    {
        if (EditContext is not null)
        {
            EditContext.OnValidationStateChanged -= HandleValidation;
        }
    }
}
