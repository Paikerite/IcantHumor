@page "/SignUser"

<EditForm Context="RegisterUser" Model="@model" OnValidSubmit="@OnValidLogin">
    <DataAnnotationsValidator />
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" sm="5">
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.h4" Color="Color.Primary" Align="Align.Start"><b>Login</b></MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Label="Username" Variant="Variant.Filled" DisableUnderLine="true" @bind-Value="model.UserName" For="@(() => model.UserName)" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Label="Password" Variant="Variant.Filled" DisableUnderLine="true" Class="mt-3" @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    @if (isLoading)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                    }
                    else
                    {
                        <MudButton Href="/RegisterUser" Variant="Variant.Filled" Color="Color.Primary">Register</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Inject]
    private IUsersService usersService { get; set; }

    [Inject]
    private AuthenticationStateProvider authenticationStateProvider { get; set; }

    [Inject]
    private ProtectedLocalStorage protectedLocalStorage { get; set; }

    [Inject]
    private ILocalStorageService LocalStorage { get; set; }

    [Inject]
    private ISnackbar Snackbar { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    private class LoginModel
    {
        [Required]
        public string UserName { get; set; }
        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }
    }

    private LoginModel model = new();

    private bool isLoading { get; set; } = false;

    private async Task OnValidLogin(EditContext context)
    {
        var model = (LoginModel)context.Model;

        isLoading = true;
        var result = await usersService.GetUserByName(model.UserName);

        if (result != null)
        {
            //var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;
            //await customAuthStateProvider.UpdateAuthenticationState(new UserViewModel
            //    {
            //        UserName = result.UserName,
            //        Role = result.Role
            //    });
            try
            {
                var JWTToken = GenerationTokenJWT.GenerateToken(new SessionUserModel
                    {
                        Id = result.Id,
                        Role = result.Role,
                        UserName = result.UserName,
                    });
                await LocalStorage.SetItemAsync("token", JWTToken);
                await authenticationStateProvider.GetAuthenticationStateAsync();
                navigationManager.NavigateTo("/", true);
            }

            catch (Exception ex)
            {
                Snackbar.Add($"Some shit happend in the server, info: {ex.Message}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Wrong password or email", Severity.Error);
        }
        isLoading = false;
    }
}
