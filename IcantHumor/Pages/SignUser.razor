@page "/SignUser"
@implements IDisposable

<EditForm EditContext="EditContext" OnValidSubmit="@OnValidLogin">
    <DataAnnotationsValidator />
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" md="4" sm="3">
            <MudPaper Class="mt-3">
                <MudGrid Justify="Justify.Center">
                    <MudItem Class="d-flex align-center justify-center" xs="12">
                        <MudText Typo="Typo.h6" Color="Color.Primary" Align="Align.Start">Sign in using OAuth</MudText>
                    </MudItem>
                    <MudItem Class="d-flex align-center justify-center" xs="12">
                        <MudDivider DividerType="DividerType.FullWidth" Class="mx-0" />
                    </MudItem>
                    <MudItem Class="d-flex align-center justify-center mx-3" xs="12">
                        <MudButton OnClick="SignInWithGoogle" Variant="Variant.Filled" StartIcon="@Icons.Custom.Brands.Google" FullWidth="true" IconSize="Size.Large" Size="Size.Large" Color="Color.Secondary">through Google</MudButton>
                    </MudItem>
                    <MudItem Class="d-flex align-center justify-center mx-3" xs="12">
                        <MudButton OnClick="SingInWithDiscord" Variant="Variant.Filled" StartIcon="@Icons.Custom.Brands.Discord" FullWidth="true" IconSize="Size.Large" Size="Size.Large" Color="Color.Secondary">through Discord</MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" md="6" sm="9">
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.h4" Color="Color.Primary" Align="Align.Start"><b>Login</b></MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Label="Login" Variant="Variant.Filled" Underline="false" @bind-Value="model.UserName" For="@(() => model.UserName)" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Label="Password" Variant="Variant.Filled" Underline="false" Class="mt-3" @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudCheckBox Color="Color.Primary" Label="Remember me?" @bind-Value="model.Remember" For="@(() => model.Remember)"></MudCheckBox>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions Class="mx-3">
                    @if (isLoading)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                    }
                    else
                    {
                        <MudButton Href="/RegisterUser" Variant="Variant.Filled" Color="Color.Primary">Register</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" @onmouseover="OnButtonPreventLogin" Style="@LoginButtonStyle" Class="ml-auto">@(TrollMode ? "Nope" : "Login")</MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Inject]
    private IUsersService usersService { get; set; } = default!;

    [Inject]
    private AuthenticationStateProvider authenticationStateProvider { get; set; } = default!;

    [Inject]
    private ProtectedLocalStorage LocalStorage { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private NavigationManager navigationManager { get; set; } = default!;

    [Inject]
    private IOptions<OAuthGoogleConfig> GoogleApiConfig { get; set; } = default!;

    [Inject]
    private IOptions<OAuthDiscordConfig> DiscordApiConfig { get; set; } = default!;

    [Inject]
    private ILogger<SignUser> logger { get; set; } = default!;

    private class LoginModel
    {
        [Required]
        public string? UserName { get; set; }
        [Required]
        [DataType(DataType.Password)]
        public string? Password { get; set; }
        public bool Remember { get; set; } = true;
    }

    private LoginModel model = new();

    private EditContext? EditContext { get; set; }

    private string LoginButtonStyle { get; set; } = string.Empty;

    private bool TrollMode { get; set; } = false;

    private bool isLoading { get; set; } = false;

    protected override void OnInitialized()
    {
        EditContext = new(model);
        EditContext.OnValidationStateChanged += HandleValidation;
    }

    private void HandleValidation(object? sender, ValidationStateChangedEventArgs args)
    {
        if (!string.IsNullOrWhiteSpace(model.UserName) && !string.IsNullOrWhiteSpace(model.Password))
        {
            TrollMode = false;
        }
        EnableTrollMode();
    }

    private async Task OnValidLogin(EditContext context)
    {
        TrollMode = false;
        var model = (LoginModel)context.Model;

        isLoading = true;

        if (model is null || model.UserName is null)
        {
            Snackbar.Add("Something went wrong while getting answer from server, try again", Severity.Error);
            isLoading = false;
            return;
        }

        var result = await usersService.GetUserByName(model.UserName);
        if (result is null)
        {
            Snackbar.Add("Something went wrong while request, try again", Severity.Error);
            isLoading = false;
            return;
        }

        result = await usersService.GetUser(result.Id, true);

        if (result is null || result.UserName is null)
        {
            Snackbar.Add("Something went wrong while getting answer from server, try again", Severity.Error);
            isLoading = false;
            return;
        }

        if (result.FullUserInfo is null || result.FullUserInfo.Password != model.Password)
        {
            Snackbar.Add("Wrong password or login", Severity.Error);
            isLoading = false;
            return;
        }

        try
        {
            var JWTToken = GenerationTokenJWT.GenerateToken(new SessionUserModel
                {
                    Id = result.Id,
                    Role = result.Role,
                    UserName = result.UserName,
                }, model.Remember);
            await LocalStorage.SetAsync("ICANTHUMOR512", JWTToken);
            await authenticationStateProvider.GetAuthenticationStateAsync();
            navigationManager.NavigateTo("/", true);
        }

        catch (Exception ex)
        {
            Snackbar.Add($"Some shit happend in the server, info: {ex.Message}", Severity.Error);
        }

        isLoading = false;
    }

    private void OnButtonPreventLogin()
    {
        if (EditContext is null)
        {
            logger.LogError("EditContext is null");
            return;
        }

        TrollMode = EditContext.Validate() ? false : true;
        EnableTrollMode();
    }

    private void EnableTrollMode()
    {
        if (TrollMode)
        {
            Random random = new();
            LoginButtonStyle = $"transition: transform .2s !important; transform: translateX({random.Next(-100, 50)}px) translateY({random.Next(-100, 100)}px);";
        }
        else
        {
            LoginButtonStyle = string.Empty;
        }
    }

    public void SignInWithGoogle()
    {
        var redirectUrl = "https://accounts.google.com/o/oauth2/v2/auth?" +
            $"client_id={GoogleApiConfig.Value.ClientId}&" +
            "response_type=code&" +
            "scope=openid%20email%20profile&" +
            $"redirect_uri={navigationManager.BaseUri + "OAuthRedirectSuccessGoogle/"}&" +
            "state=MetalGearRAY&" +
            "nonce=MetalGearREX";
        navigationManager.NavigateTo(redirectUrl, true);
    }

    public void SingInWithDiscord()
    {
        var redirectUrl = "https://discord.com/api/oauth2/authorize?" +
            $"client_id={DiscordApiConfig.Value.AppId}&" +
            "response_type=code&" +
            $"redirect_uri={navigationManager.BaseUri + "OAuthRedirectSuccessDiscord"}&" +
            "scope=identify+email";
        navigationManager.NavigateTo(redirectUrl, true);
    }

    void IDisposable.Dispose()
    {
        if (EditContext is not null)
        {
            EditContext.OnValidationStateChanged -= HandleValidation;
        }
    }
}
