@page "/RegisterUser"
@using System.Security.Claims;

<EditForm Context="RegisterUser" Model="@model" OnValidSubmit="@OnValidRegister">
    <DataAnnotationsValidator />
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" sm="5">
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.h4" Color="Color.Primary" Align="Align.Start"><b>Registration</b></MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Label="Username" Variant="Variant.Filled" DisableUnderLine="true" @bind-Value="model.UserName" For="@(() => model.UserName)" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Label="Email" Variant="Variant.Filled" DisableUnderLine="true" Class="mt-3" @bind-Value="model.UserEmail" For="@(() => model.UserEmail)" InputType="InputType.Email" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField Label="Password" Variant="Variant.Filled" DisableUnderLine="true" HelperText="Choose a strong password (min. 6 characters)" Class="mt-3" @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField Label="Confirm password" Variant="Variant.Filled" DisableUnderLine="true" HelperText="Repeat the password" Class="mt-3" @bind-Value="model.ConfirmPassword" For="@(() => model.ConfirmPassword)" InputType="InputType.Password" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudFileUpload T="IBrowserFile" For="@(() => model.File)" @bind-Files="model.File" Class="mt-3" Accept=".png" OnFilesChanged="UploadFile">
                                <ButtonTemplate>
                                    <MudButton HtmlTag="label" FullWidth="true" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Image" for="@context">
                                        Upload image for avatar
                                    </MudButton>
                                </ButtonTemplate>
                                <SelectedTemplate>
                                    @if (context != null)
                                    {
                                        <MudText Class="mt-1" Align="Align.Center">@context.Name</MudText>
                                    }
                                    else
                                    {
                                        <MudText Class="mt-1" Align="Align.Center">leave if you don't wanna</MudText>
                                    }
                                </SelectedTemplate>
                            </MudFileUpload>
                        </MudItem>
                        @*                        <MudItem xs="12" sm="5">
                        @if (!string.IsNullOrEmpty(imageBase64))
                        {
                        <MudAvatar>
                        <MudImage Src="@($"data:image/png;base64,{imageBase64}")" Alt="Uploaded Image" />
                        </MudAvatar>
                        }
                        </MudItem>*@
                        <MudItem xs="12">
                            <MudCheckBox Color="Color.Primary" Label="Remember me?" @bind-Checked="model.Remember" For="@(() => model.Remember)"></MudCheckBox>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    @if (isLoading)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                    }
                    else
                    {
                        <MudLink  Href="/SignUser">Already have an account?</MudLink>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Inject]
    private IUsersService usersService { get; set; }

    [Inject]
    private AuthenticationStateProvider authenticationStateProvider { get; set; }

    [Inject]
    private ProtectedLocalStorage LocalStorage { get; set; }

    [Inject]
    private ISnackbar Snackbar { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    private class RegisterModel
    {
        [Required]
        [MinLength(3, ErrorMessage = "Minimum symbols - 3")]
        public string UserName { get; set; }
        [Required]
        [EmailAddress]
        public string UserEmail { get; set; }
        public IBrowserFile? File { get; set; }
        [Required]
        [MinLength(6, ErrorMessage = "Minimum symbols - 6")]
        [RegularExpression("^(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d]+$", ErrorMessage = "Only english. At least one number and one capital letter")]
        [DataType(DataType.Password)]
        public string Password { get; set; }
        [Required]
        [Compare("Password")]
        public string ConfirmPassword { get; set; }
        public bool Remember { get; set; } = true;
    }

    private RegisterModel model = new();

    private bool isLoading { get; set; } = false;

    private int maxFileSize = 1024 * 1024 * 2; // 2MB

    private IBrowserFile? ImageFile { get; set; }
    //private string? imageBase64 { get; set; }

    private void UploadFile(InputFileChangeEventArgs e)
    {
        if (e.File.Size <= maxFileSize)
        {
            ImageFile = e.File;
            Snackbar.Add($"This file {e.File.Name} has upload succesfully");
        }
        else
        {
            Snackbar.Add($"This file {e.File.Name} size too much, maximum {maxFileSize} mb", Severity.Error);
        }
        StateHasChanged();
    }

    private async Task<string> CaptureFile()
    {
        if (ImageFile == null)
        {
            return null;
        }
        try
        {
            //ImageFiles.Clear();
            // e.GetMultipleFiles(maxAllowedFiles) for several files
            string newFileName = Path.ChangeExtension(Path.GetRandomFileName(),
                                                      Path.GetExtension(ImageFile.Name));

            var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "AvatarsImages");
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }

            string absolutePath = Path.Combine(path, newFileName);
            string relativePath = Path.Combine("AvatarsImages", newFileName);


            await using FileStream fs = new(absolutePath, FileMode.Create);
            ImageFile = await ImageFile.RequestImageFileAsync(ImageFile.ContentType, 300, 300);
            await ImageFile.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Some shit happend in the server, info: {ex.Message}", Severity.Error);
            return null;
        }
    }

    private async Task OnValidRegister(EditContext context)
    {
        isLoading = true;
        string urlToFile = null;
        if (ImageFile != null)
        {
            urlToFile = await CaptureFile();  
        }

        var model = (RegisterModel)context.Model;
        UserViewModel userViewModel = new()
        {
            Role = Models.Enums.Roles.User,
            UserName = model.UserName,
            UserEmail = model.UserEmail,
            ConfirmEmail = false,
            ProfilePicture = urlToFile,
            RegisteredAt = DateTime.Now,
            Password = model.Password,
        };

        try
        {
            if (await usersService.IsExistNameUserInDB(userViewModel.UserName))
            {
                throw new Exception("Your Username is already taken, try another");
            }

            var result = await usersService.PostUser(userViewModel);
            var JWTToken = GenerationTokenJWT.GenerateToken(new SessionUserModel
            {
                Id = result.Id,
                Role = result.Role,
                UserName = result.UserName,
            }, model.Remember);
            await LocalStorage.SetAsync("ICANTHUMOR512", JWTToken);
            await authenticationStateProvider.GetAuthenticationStateAsync();
            navigationManager.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Some shit happend in the server, info: {ex.Message}", Severity.Error);
        }
        isLoading = false;
    }
}
