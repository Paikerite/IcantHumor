@page "/PostAdd"
@attribute [Authorize]

<PageTitle>Posting post</PageTitle>

<EditForm Context="PostAdd" Model="@model" OnValidSubmit="@OnValidPost">
    <DataAnnotationsValidator />
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" sm="6">
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudFileUpload T="IBrowserFile" Disabled="isLoading" OnFilesChanged="UploadFile" For="@(() => model.File)" @bind-Files="model.File" Hidden="false" Class="flex-1" Accept=".png, .jpg, .jpeg, .gif, .mp4" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                                           @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass">
                                <ActivatorContent>
                                    <MudPaper Outlined="true" Height="350px" Class="@DragClass">
                                        @if (model.File == null)
                                        {
                                            <MudText Align="Align.Center" Typo="Typo.h6">Drag and drop file here or click</MudText>
                                        }
                                        else
                                        {
                                            <MudText Align="Align.Center" Typo="Typo.h6">@model.File.Name</MudText>
                                            if (isLoading)
                                            {
                                                <MudStack AlignItems="AlignItems.Center">
                                                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                                                </MudStack>
                                            }
                                            <MudStack AlignItems="AlignItems.Center">
                                                <MudImage id="imageShowcase" ObjectFit="ObjectFit.Contain" Height="245" />
                                            </MudStack>
                                        }
                                    </MudPaper>
                                </ActivatorContent>
                            </MudFileUpload>
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="model.Title" For="@(()=>model.Title)" Counter="50" MaxLength="50" Immediate="true" Label="Title" Variant="Variant.Filled" Margin="Margin.Dense"></MudTextField>
                        </MudItem>
                        <MudItem xs="12">
                            <MudChipSet T="string" AllClosable="true" OnClose="RemoveCategoryChip">
                                @foreach (var valueOfChip in valuesOfChips)
                                {
                                    <MudChip Text="@valueOfChip.Name" Size="Size.Large"></MudChip>
                                }
                            </MudChipSet>
                            <MudStack AlignItems="AlignItems.Center" Row="true">
                                <MudAutocomplete SearchFunc="SearchFunc" @bind-Value="model.CategoryByUser" For="@(() => model.CategoryByUser)" Placeholder="Add tag" Variant="Variant.Text" AutoFocus="false"
                                                 ShowProgressIndicator="true" CoerceText="false" ResetValueOnEmptyText="false" CoerceValue="true" MaxLength="25"
                                                 Required="true" ProgressIndicatorColor="Color.Primary" AnchorOrigin="Origin.BottomCenter" />
                                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Add" OnClick="AddCategoryChip"></MudIconButton>
                            </MudStack>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
                <MudCardActions>
                    @if (isLoading)
                    {
                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                    }
                    else
                    {
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Upload</MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="4">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h3">Base rules</MudText>
                    <MudText>&bull; No NSFW</MudText>
                    <MudText>&bull; No politics or debates of controversial nature</MudText>
                    <MudText>&bull; No harassment</MudText>
                    <MudText>&bull; No discrimination or hate speech</MudText>
                    <MudText>&bull; No doxxing</MudText>
                    <MudText>Try post something related to videogames</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Inject]
    private IMediaFilesService mediaFilesService { get; set; }

    [Inject]
    private IUsersService usersService { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; }

    [Inject]
    private ICategoriesService categoriesService { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    [Inject]
    private ISnackbar Snackbar { get; set; }

    private IEnumerable<CategoryViewModel> categories { get; set; }

    private UserViewModel User { get; set; }

    private class PostAddModel
    {
        [Required]
        [MaxLength(50)]
        [MinLength(3, ErrorMessage = "Minimum symbols - 3")]
        public string Title { get; set; }
        public IBrowserFile File { get; set; }

        [Required]
        [MaxLength(50)]
        [MinLength(3, ErrorMessage = "Minimum symbols - 3")]
        public string CategoryByUser { get; set; }
        //public IEnumerable<string> Categories { get; set; }
    }

    private PostAddModel model = new();

    List<CategoryViewModel> valuesOfChips = new List<CategoryViewModel>();

    public void RemoveCategoryChip(MudChip<string> chip) => valuesOfChips.Remove(valuesOfChips.First(v => v.Name == chip.Text));

    private int maxFileSize = 1024 * 1024 * 30; // 30MB

    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";

    private string DragClass = DefaultDragClass;

    private bool isLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var userName = authState.User.Identity.Name;
        User = await usersService.GetUserByName(userName);
    }

    public async Task<IEnumerable<string>> SearchFunc(string search, CancellationToken token)
    {
        categories = await categoriesService.GetCategories();
        if (string.IsNullOrEmpty(search))
        {
            return categories.Select(n => n.Name);
        }
        return await Task.FromResult(categories
            .Select(n => n.Name)
            .Where(x => x.Contains(search, StringComparison.OrdinalIgnoreCase)));
    }

    private async Task AddCategoryChip()
    {
        if (model.CategoryByUser != null)
        {
            if (!valuesOfChips.Any(v => v.Name == model.CategoryByUser))
            {
                //valuesOfChips.Add(new() { Name = CategoryByUser.ToLower() });
                var result = await categoriesService.GetCategoryByName(model.CategoryByUser);
                if (result != null)
                {
                    valuesOfChips.Add(result);
                }
                else
                {
                    valuesOfChips.Add(new() { Name = model.CategoryByUser.ToLower() });
                }
            }
            else
            {
                Snackbar.Add("Category has already chosen", Severity.Warning);
            }
        }
        else
        {
            Snackbar.Add("Add at least one tag", Severity.Warning);
        }
    }

    private async Task OnValidPost()
    {
        isLoading = true;
        string urlToFile;

        try
        {
            if (model.File != null)
            {
                urlToFile = await CaptureFile();
            }
            else
            {
                throw new Exception("You have to upload some media");
            }
            var authState = await authenticationState;
            var user = await usersService.GetUserByName(authState.User.Identity.Name);

            MediaViewModel mediaViewModel = new();

            // mediaViewModel.IdOfCreator = user.Id;
            mediaViewModel.Title = model.Title;
            mediaViewModel.UrlToFile = urlToFile;
            mediaViewModel.TypeOfFile = GetTypeFile.GetTypeOfFile(urlToFile);
            mediaViewModel.DateUpload = DateTime.Now;
            mediaViewModel.IdOfCreator = User.Id;

            categories = await categoriesService.GetCategories();
            List<Guid> categoriesIdToAdd = new();
            foreach (var item in valuesOfChips)
            {
                if (!categories.Any(c => c.Name == item.Name))
                {
                    var res = await categoriesService.PostCategory(item);
                    categoriesIdToAdd.Add(res.Id);
                }
                else
                {
                    categoriesIdToAdd.Add(item.Id);
                }
            }

            MediaViewModel postResult = await mediaFilesService.PostMediaViewModel(mediaViewModel);

            if (postResult != null)
            {
                await mediaFilesService.PatchCategoryInPost(postResult.Id, categoriesIdToAdd);
            }

            navigationManager.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Some shit happend in the server, info: {ex.Message}", Severity.Error);
        }
        isLoading = false;
    }

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        isLoading = true;
        if (e.File.Size <= maxFileSize)
        {
            model.File = e.File;

            try
            {
                var imageStream = model.File.OpenReadStream(maxFileSize);
                var dotnetImageStream = new DotNetStreamReference(imageStream);
                await JS.InvokeVoidAsync("setImage", "imageShowcase", dotnetImageStream);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Some shit happend in the server, info: {ex.Message}", Severity.Error);
            }
            finally
            {
                isLoading = false;
            }
        }
        else
        {
            Snackbar.Add($"This file {e.File.Name} size too much, maximum {maxFileSize} mb", Severity.Error);
        }
        isLoading = false;
        StateHasChanged();
    }

    private async Task<string> CaptureFile()
    {
        if (model.File == null)
        {
            return null;
        }
        try
        {
            //ImageFiles.Clear();
            // e.GetMultipleFiles(maxAllowedFiles) for several files
            string newFileName = Path.ChangeExtension(Path.GetRandomFileName(),
                                                      Path.GetExtension(model.File.Name));

            var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "PostResources");
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }

            string absolutePath = Path.Combine(path, newFileName);
            string relativePath = Path.Combine("PostResources", newFileName);


            await using FileStream fs = new(absolutePath, FileMode.Create);
            await model.File.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Some shit happend in the server, info: {ex.Message}", Severity.Error);
            return null;
        }
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }
}


