@page "/PostDetail/{PostID:guid}"

<PageTitle>Post info</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudGrid>
        @if (media != null)
        {
            <MudItem xs="12">
                <MudText Typo="Typo.h4">@media.Title</MudText>
            </MudItem>
            <MudItem xs="12">
                <MudPaper>
                    <MudToolBar Class="d-flex justify-space-between">
                        <AuthorizeView>
                            <Authorized>
                                @if (userOfUploader.UserName == authState.User.Identity.Name)
                                {
                                    <MudTooltip Text="Edit" Placement="Placement.Top">
                                        <MudIconButton Variant="Variant.Filled" Href=@($"/PostEdit/{media.Id}") Color="Color.Primary" Icon="@Icons.Material.Outlined.Edit" />
                                    </MudTooltip>
                                    <MudTooltip Text="Delete" Placement="Placement.Top">
                                        <MudIconButton Variant="Variant.Filled" @onclick="DeletePost" Color="Color.Primary" Icon="@Icons.Material.Outlined.Delete" />
                                    </MudTooltip>
                                }         
                            </Authorized>
                        </AuthorizeView>
                        <div>
                            <MudButton @onclick="()=>PutReact(React.Like)" Variant="Variant.Outlined" aria-label="kek">
                                <MudImage Class="me-1" Src="/staticimgs/ICANT1x.webp"></MudImage>
                                @media.Like
                            </MudButton>
                            <MudButton @onclick="()=>PutReact(React.Dislike)" Variant="Variant.Outlined" aria-label="cringe">
                                <MudImage Class="me-1" Src="/staticimgs/CatCringe1x.webp"></MudImage>
                                @media.Dislike
                            </MudButton>
                        </div>
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Download" Color="Color.Primary">Download</MudButton>
                    </MudToolBar>
                </MudPaper>
            </MudItem>
            <MudItem Class="d-flex justify-center" xs="12">
                <MudImage Fluid="true" Width="720" Src="@media.UrlToFile" Alt="@media.Title" />
            </MudItem>
            <MudItem xs="12">
                <MudChipSet ReadOnly="false">
                    @foreach (var item in media.Categories)
                    {
                        <MudChip Text="@item.Name"></MudChip>
                    }
                </MudChipSet>
            </MudItem>
            <MudItem xs="12">
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    @if (userOfUploader != null)
                    {
                        <MudAvatar Color="Color.Primary">
                            @if (userOfUploader.ProfilePicture != null)
                            {
                                <MudImage Src="@userOfUploader.ProfilePicture"></MudImage>
                            }
                            else
                            {
                                @userOfUploader.UserName[0]
                            }
                        </MudAvatar>
                        <MudText>
                            @userOfUploader.UserName
                        </MudText>
                    }
                    else
                    {
                        <MudSkeleton SkeletonType="SkeletonType.Circle" Width="50px" Height="50px"></MudSkeleton>
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="150px"></MudSkeleton>
                    }
                </MudStack>
            </MudItem>
        }
        else
        {
            <MudItem xs="12">
                <MudSkeleton SkeletonType="SkeletonType.Text" />
                <MudSkeleton SkeletonType="SkeletonType.Text" />
            </MudItem>
            <MudItem xs="12">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="600px" />
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    [Parameter]
    public Guid PostID { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Inject]
    private IDialogService DialogService { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    [Inject]
    private IMediaFilesService mediaFilesService { get; set; }

    [Inject]
    private ICategoriesService categoriesService { get; set; }

    [Inject]
    private IReactedUserService reactedUserService { get; set; }

    [Inject]
    private IUsersService usersService { get; set; }

    [Inject]
    private ISnackbar snackbar { get; set; }

    private AuthenticationState authState { get; set; }

    private MediaViewModel media { get; set; }

    private UserViewModel userOfUploader { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            authState = await authenticationState;
            media = await mediaFilesService.GetMediaViewModel(PostID);
            userOfUploader = await usersService.GetUser(media.IdOfCreator);
        }
        catch (Exception ex)
        {
            snackbar.Add($"Error happend in the server, info: {ex.Message}", Severity.Error);
        }
    }

    private async Task PutReact(React reaction)
    {
        try
        {
            var user = await usersService.GetUserByName(authState.User.Identity.Name);
            if (authState.User.Identity.IsAuthenticated)
            {
                if (!media.WhoReacted.Any(w => w.IdReactedUser == user.Id))
                {
                    var changePost = await mediaFilesService.MakeReactionInPost(media.Id, new ReactedUserViewModel
                        {
                            IdReactedUser = user.Id,
                            ChosenReact = reaction,
                        });

                    media.WhoReacted = changePost.WhoReacted;
                }
                else
                {
                    var whoReacted = media.WhoReacted.First(w => w.IdReactedUser == user.Id);
                    var react = await reactedUserService.DeleteReactedUser(whoReacted.Id);

                    //memes.First(m => m.Id == guidPost).WhoReacted
                    //    .Remove(memes
                    //        .First(m => m.Id == guidPost).WhoReacted
                    //        .First(a => a.Id == whoReacted.Id));
                    media.WhoReacted.Remove(media.WhoReacted.First(r=>r.Id == whoReacted.Id));
                }
            }
            else
            {
                navigationManager.NavigateTo("/SignUser", true);
            }
        }
        catch (Exception ex)
        {
            snackbar.Add($"Some shit happend in the server, try again later, info: {ex.Message[80]}", Severity.Error);
        }
    }

    private async Task DeletePost()
    {
        var parameters = new DialogParameters<DialogConfirm>();
        parameters.Add(x => x.ContentText, "Do you really want to delete this post? This process cannot be undone.");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<DialogConfirm>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var delepost = await mediaFilesService.DeleteMediaViewModel(PostID);
            var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", media.UrlToFile);
            System.IO.File.Delete(path);
            foreach (var item in delepost.Categories.Where(c=>c.Posts.Count()==0))
            {
                await categoriesService.DeleteCategory(item.Id);
            }
            navigationManager.NavigateTo("/", true);
        }
    }
}
