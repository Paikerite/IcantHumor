@page "/PostDetail/{PostID:guid}"

<PageTitle>Post info</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudGrid>
        @if (media != null)
        {
            <MudItem xs="12">
                @if (userOfUploader != null && userOfUploader.UserName == authState.User.Identity.Name)
                {
                    @if (isEditingTitle)
                    {
                        <MudGrid Class="d-flex align-center justify-center">
                            <MudItem xs="10">
                                <MudTextField @bind-Value="UpdatedTitle" Counter="50" MaxLength="50" Immediate="true" Label="Title" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
                            </MudItem>
                            <MudItem xs="1">
                                <MudIconButton Icon="@Icons.Material.Filled.Check" Disabled="@(UpdatedTitle == null || UpdatedTitle.Length < 3 ? true : false)" OnClick="EditTitle" Size="Size.Large" Color="Color.Success" aria-label="accept"></MudIconButton>
                            </MudItem>
                            <MudItem xs="1">
                                <MudIconButton Icon="@Icons.Material.Filled.Clear" OnClick="EditTitleStatus" Color="Color.Error" Size="Size.Large" aria-label="decline"></MudIconButton>
                            </MudItem>
                        </MudGrid>
                    }
                    else
                    {
                        <MudBadge Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Overlap="true" Class="mx-6 my-4">
                            <MudButton OnClick="EditTitleStatus" Variant="Variant.Text">
                                <MudText Typo="Typo.h4">@media.Title</MudText>
                                </MudButton>
                            </MudBadge>
                    }

                }
                else
                {
                    <MudText Typo="Typo.h4">@media.Title</MudText>
                }
            </MudItem>
            <MudItem xs="12">
                <MudPaper>
                    <MudToolBar Class="d-flex justify-space-between">
                        <AuthorizeView>
                            <Authorized>
                                @if (userOfUploader != null && userOfUploader.UserName == authState.User.Identity.Name)
                                {
                                    <MudTooltip Text="Delete" Placement="Placement.Top">
                                        <MudIconButton Variant="Variant.Filled" @onclick="DeletePost" Color="Color.Primary" Icon="@Icons.Material.Outlined.Delete" />
                                    </MudTooltip>
                                }
                                <MudTooltip Text=@(isFavourite ? "Added to Favourite" : "Add to Favourite" ) Placement="Placement.Top">
                                    <MudToggleIconButton Variant="Variant.Filled" Toggled="@isFavourite" Color="Color.Primary" ToggledChanged="AddPostToFavorite" ToggledColor="Color.Primary"
                                                         Icon="@Icons.Material.Filled.FavoriteBorder" Title="Off" aria-label="favourite"
                                                         ToggledIcon="@Icons.Material.Filled.Favorite" ToggledTitle="On" />
                                </MudTooltip>
                            </Authorized>
                        </AuthorizeView>
                        <div>
                            <MudTooltip Text="Funny" Placement="Placement.Top">
                                <MudButton @onclick="()=>PutReact(React.Like)" Variant="Variant.Outlined" aria-label="kek">
                                    <MudImage Class="me-1" Src="/staticimgs/ICANT1x.webp"></MudImage>
                                    @media.Like
                                </MudButton>
                            </MudTooltip>
                            <MudTooltip Text="UnFunny" Placement="Placement.Top">
                                <MudButton @onclick="()=>PutReact(React.Dislike)" Variant="Variant.Outlined" aria-label="cringe">
                                    <MudImage Class="me-1" Src="/staticimgs/CatCringe1x.webp"></MudImage>
                                    @media.Dislike
                                </MudButton>
                            </MudTooltip>
                        </div>
                        <MudButton Variant="Variant.Filled" @onclick="DownloadFileFromStream" StartIcon="@Icons.Material.Filled.Download" Color="Color.Primary">Download</MudButton>
                    </MudToolBar>
                </MudPaper>
            </MudItem>
            <MudPaper Width="100%">
                <MudItem Class="d-flex justify-center my-3" xs="12">
                    @if (media.TypeOfFile is TypeOfFile.Video)
                    {
                        <BlazoredVideo class="w-100 rounded-lg"
                                       style="max-width:720px;"
                                       loop="loop"
                                       controls="controls">
                            <source src="@media.UrlToFile" type="video/mp4" />
                        </BlazoredVideo>
                    }
                    else
                    {
                        <MudImage Fluid="true" Width="720" Src="@media.UrlToFile" Alt="@media.Title" />
                    }
                </MudItem>
            </MudPaper>
            <MudPaper Width="100%" Class="mt-3">
                <MudItem xs="12" Class="mt-5 mx-4">
                    <MudChipSet ReadOnly="false">
                        @foreach (var item in media.Categories)
                        {
                            <MudChip Href="@($"/?page=1&categories={item.Id}")" Text="@item.Name"></MudChip>
                        }
                    </MudChipSet>
                </MudItem>
                <MudItem xs="12" Class="ma-5">
                    <MudStack Row="true" AlignItems="AlignItems.Center">
                        @if (userOfUploader != null)
                        {
                            <MudAvatar Color="Color.Primary">
                                @if (userOfUploader.ProfilePicture != null)
                                {
                                    <MudImage Src="@userOfUploader.ProfilePicture"></MudImage>
                                }
                                else
                                {
                                    @userOfUploader.UserName[0]
                                }
                            </MudAvatar>
                            <MudText>
                                @userOfUploader.UserName
                            </MudText>
                            <MudText Class="d-flex justify-end flex-grow-1">
                                Uploaded by @media.DateUpload.ToString("d")
                            </MudText>
                        }
                        else
                        {
                            <MudSkeleton SkeletonType="SkeletonType.Circle" Width="50px" Height="50px"></MudSkeleton>
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="150px"></MudSkeleton>
                        }
                    </MudStack>
                </MudItem>
            </MudPaper>
        }
        else
        {
            <MudItem xs="12">
                <MudSkeleton SkeletonType="SkeletonType.Text" />
                <MudSkeleton SkeletonType="SkeletonType.Text" />
            </MudItem>
            <MudItem xs="12">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="600px" />
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    [Parameter]
    public Guid PostID { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Inject]
    private IDialogService DialogService { get; set; }

    [Inject]
    private NavigationManager navigationManager { get; set; }

    [Inject]
    private IMediaFilesService mediaFilesService { get; set; }

    [Inject]
    private IFavouritesService favouritesService { get; set; }

    [Inject]
    private ICategoriesService categoriesService { get; set; }

    [Inject]
    private IReactedUserService reactedUserService { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; }

    [Inject]
    private IUsersService usersService { get; set; }

    [Inject]
    private ISnackbar snackbar { get; set; }

    private AuthenticationState authState { get; set; }

    private MediaViewModel media { get; set; }

    private UserViewModel userOfUploader { get; set; }

    private bool isEditingTitle { get; set; } = false;

    private bool isFavourite { get; set; }

    private string UpdatedTitle { get; set; }

    private void EditTitleStatus() => isEditingTitle = !isEditingTitle;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            authState = await authenticationState;
            var userName = authState.User.Identity.Name;
            media = await mediaFilesService.GetMediaViewModel(PostID);
            if (media != null)
            {
                userOfUploader = await usersService.GetUser(media.IdOfCreator);

                if (userName != null)
                {
                    var usersFavorites = await usersService.GetUserByName(userName);
                    usersFavorites = await usersService.GetUser(usersFavorites.Id, true);
                    isFavourite = usersFavorites.Favourites.Any(a => a.IdPost == PostID);
                }

                UpdatedTitle = media.Title;
            }
        }
        catch (Exception ex)
        {
            snackbar.Add($"Error happend in the server, info: {ex.Message}", Severity.Error);
        }
    }

    private async Task PutReact(React reaction)
    {
        try
        {
            if (authState.User.Identity.IsAuthenticated)
            {
                var user = await usersService.GetUserByName(authState.User.Identity.Name);
                //var post = await mediaFilesService.GetMediaViewModel(guidPost);
                if (!media.WhoReacted.Any(w => w.IdReactedUser == user.Id))
                {
                    var changePost = await mediaFilesService.MakeReactionInPost(media.Id, new ReactedUserViewModel
                        {
                            IdReactedUser = user.Id,
                            ChosenReact = reaction,
                        });

                    media.WhoReacted = changePost.WhoReacted;
                }
                else
                {
                    var whoReacted = media.WhoReacted.First(w => w.IdReactedUser == user.Id);
                    var react = await reactedUserService.DeleteReactedUser(whoReacted.Id);

                    media.WhoReacted
                        .Remove(media.WhoReacted.First(a => a.Id == whoReacted.Id));
                    if (react.ChosenReact != reaction)
                    {
                        var changePost = await mediaFilesService.MakeReactionInPost(media.Id, new ReactedUserViewModel
                            {
                                IdReactedUser = user.Id,
                                ChosenReact = reaction,
                            });

                        media.WhoReacted = changePost.WhoReacted;
                    }

                }
            }
            else
            {
                navigationManager.NavigateTo("/SignUser", true);
            }
        }
        catch (Exception ex)
        {
            snackbar.Add($"Some shit happend in the server, try again later, info: {ex.Message}", Severity.Error);
        }
    }

    private async Task EditTitle()
    {
        try
        {
            if (UpdatedTitle != null && UpdatedTitle.Length >= 3)
            {
                var res = await mediaFilesService.UpdateTitlePost(media.Id, UpdatedTitle);
                if (res != null)
                {
                    media.Title = res.Title;
                    EditTitleStatus();
                }
                else
                {
                    snackbar.Add("Failed to change the title, sorry, try again", Severity.Error);
                }
            }
            else
            {
                snackbar.Add("Failed to change the title, minimum 3 symbols", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            snackbar.Add($"Some shit happend in the server, try again later, info: {ex.Message}", Severity.Error);
        }
    }

    private async Task AddPostToFavorite()
    {
        if (isFavourite)
        {
            var usersFavorites = await usersService.GetUserByName(authState.User.Identity.Name);
            usersFavorites = await usersService.GetUser(usersFavorites.Id, true);
            var fav = usersFavorites.Favourites.FirstOrDefault(xd => xd.IdPost == PostID);
            if (fav != null)
            {
                usersFavorites.Favourites.Remove(fav);
                await usersService.PutUser(usersFavorites.Id, usersFavorites);
                await favouritesService.DeleteFavourite(fav.Id);
                isFavourite = false;
            }
        }
        else
        {
            var usersFavorites = await usersService.GetUserByName(authState.User.Identity.Name);
            usersFavorites = await usersService.GetUser(usersFavorites.Id, true);
            var fav = usersFavorites.Favourites.FirstOrDefault(xd => xd.IdPost == PostID);
            if (fav == null)
            {
                usersFavorites.Favourites.Add(new FavouriteViewModel
                    {
                        IdReactedUser = usersFavorites.Id,
                        IdPost = media.Id,
                    });
                await usersService.PutUser(usersFavorites.Id, usersFavorites);
                isFavourite = true;
            }
        }

    }

    private async Task DeletePost()
    {
        var parameters = new DialogParameters<DialogConfirm>();
        parameters.Add(x => x.ContentText, "Do you really want to delete this post? This process cannot be undone.");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<DialogConfirm>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var delepost = await mediaFilesService.DeleteMediaViewModel(PostID);
            var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", media.UrlToFile);
            System.IO.File.Delete(path);
            foreach (var item in media.Categories.Where(c => c.Posts.Count() == 1)) //1, cuz need consider that Post related for this category already deleted in server, but media hadn't updated yet
            {
                await categoriesService.DeleteCategory(item.Id);
            }
            navigationManager.NavigateTo("/", true);
        }
    }

    private async Task DownloadFileFromStream()
    {
        var fileStream = GetFileStream();
        var fileName = Path.GetFileNameWithoutExtension(media.UrlToFile);
        var fileExtension = Path.GetExtension(media.UrlToFile);

        fileName = media.Title;

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName + fileExtension, streamRef);
    }

    private Stream GetFileStream()
    {
        var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", media.UrlToFile);
        // var BinaryData = File.ReadAllBytes(path);
        // var fileStream = new MemoryStream(BinaryData);

        // return fileStream;
        return File.OpenRead(@$"{path}");
    }
}
